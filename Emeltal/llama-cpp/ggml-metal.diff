18a19
> #define GGML_METAL_BUFFER_OPTIONS MTLResourceStorageModeShared|MTLResourceHazardTrackingModeUntracked
22a24
> #define GGML_METAL_BUFFER_OPTIONS MTLResourceStorageModeShared
166,167d167
<     int n_cb;
< 
171,172d170
<     dispatch_queue_t d_queue;
< 
186,191d183
< // Here to assist with NSBundle Path Hack
< @interface GGMLMetalClass : NSObject
< @end
< @implementation GGMLMetalClass
< @end
< 
234a227,229
> static int g_backend_shared_context_ref_count = 0;
> struct ggml_metal_context *g_backend_shared_context = NULL;
> 
235a231,236
>     if(g_backend_shared_context) {
>         g_backend_shared_context_ref_count++;
>         GGML_METAL_LOG_INFO("%s: reusing existing context, now used by %d clients\n", __func__, g_backend_shared_context_ref_count);
>         return g_backend_shared_context;
>     }
> 
254d254
<     ctx->n_cb   = MIN(n_cb, GGML_METAL_MAX_BUFFERS);
256d255
<     ctx->d_queue = dispatch_queue_create("ggml-metal", DISPATCH_QUEUE_CONCURRENT);
262,268c261
<         NSBundle * bundle = nil;
< #ifdef SWIFT_PACKAGE
<         bundle = SWIFTPM_MODULE_BUNDLE;
< #else
<         bundle = [NSBundle bundleForClass:[GGMLMetalClass class]];
< #endif
<         NSError * error = nil;
---
>         NSBundle * bundle = [NSBundle mainBundle];
270,321c263,270
<         if (libPath != nil) {
<             // pre-compiled library found
<             NSURL * libURL = [NSURL fileURLWithPath:libPath];
<             GGML_METAL_LOG_INFO("%s: loading '%s'\n", __func__, [libPath UTF8String]);
<             metal_library = [ctx->device newLibraryWithURL:libURL error:&error];
<             if (error) {
<                 GGML_METAL_LOG_ERROR("%s: error: %s\n", __func__, [[error description] UTF8String]);
<                 return NULL;
<             }
<         } else {
<             GGML_METAL_LOG_INFO("%s: default.metallib not found, loading from source\n", __func__);
< 
<             NSString * sourcePath;
<             NSString * ggmlMetalPathResources = [[NSProcessInfo processInfo].environment objectForKey:@"GGML_METAL_PATH_RESOURCES"];
< 
<             GGML_METAL_LOG_INFO("%s: GGML_METAL_PATH_RESOURCES = %s\n", __func__, ggmlMetalPathResources ? [ggmlMetalPathResources UTF8String] : "nil");
< 
<             if (ggmlMetalPathResources) {
<                 sourcePath = [ggmlMetalPathResources stringByAppendingPathComponent:@"ggml-metal.metal"];
<             } else {
<                 sourcePath = [bundle pathForResource:@"ggml-metal" ofType:@"metal"];
<             }
<             if (sourcePath == nil) {
<                 GGML_METAL_LOG_WARN("%s: error: could not use bundle path to find ggml-metal.metal, falling back to trying cwd\n", __func__);
<                 sourcePath = @"ggml-metal.metal";
<             }
<             GGML_METAL_LOG_INFO("%s: loading '%s'\n", __func__, [sourcePath UTF8String]);
<             NSString * src = [NSString stringWithContentsOfFile:sourcePath encoding:NSUTF8StringEncoding error:&error];
<             if (error) {
<                 GGML_METAL_LOG_ERROR("%s: error: %s\n", __func__, [[error description] UTF8String]);
<                 return NULL;
<             }
< 
<             @autoreleasepool {
<                 // dictionary of preprocessor macros
<                 NSMutableDictionary * prep = [NSMutableDictionary dictionary];
< 
< #ifdef GGML_QKK_64
<                 prep[@"QK_K"] = @(64);
< #endif
< 
<                 MTLCompileOptions* options = [MTLCompileOptions new];
<                 options.preprocessorMacros = prep;
< 
<                 //[options setFastMathEnabled:false];
< 
<                 metal_library = [ctx->device newLibraryWithSource:src options:options error:&error];
<                 if (error) {
<                     GGML_METAL_LOG_ERROR("%s: error: %s\n", __func__, [[error description] UTF8String]);
<                     return NULL;
<                 }
<             }
---
>         // pre-compiled library found
>         NSURL * libURL = [NSURL fileURLWithPath:libPath];
>         GGML_METAL_LOG_INFO("%s: loading '%s'\n", __func__, [libPath UTF8String]);
>         NSError *error;
>         metal_library = [ctx->device newLibraryWithURL:libURL error:&error];
>         if (error) {
>             GGML_METAL_LOG_ERROR("%s: error: %s\n", __func__, [[error description] UTF8String]);
>             return NULL;
540a490,492
> 
>     g_backend_shared_context_ref_count++;
>     g_backend_shared_context = ctx;
544a497,502
>     g_backend_shared_context_ref_count--;
>     if(g_backend_shared_context_ref_count > 0) {
>         GGML_METAL_LOG_INFO("%s: removed a reference, still used by %d clients\n", __func__, g_backend_shared_context_ref_count);
>         return;
>     }
> 
545a504
>     g_backend_shared_context = nil;
554,555d512
<     dispatch_release(ctx->d_queue);
< 
704,710d660
<     // create multiple command buffers and enqueue them
<     // then, we encode the graph into the command buffers in parallel
< 
<     const int n_nodes  = gf->n_nodes;
<     const int n_cb = ctx->n_cb;
<     const int n_nodes_per_cb = (n_nodes + n_cb - 1) / n_cb;
< 
725,726d674
<     id<MTLCommandBuffer> command_buffer_builder[n_cb];
<     for (int cb_idx = 0; cb_idx < n_cb; ++cb_idx) {
728,729d675
<         command_buffer_builder[cb_idx] = command_buffer;
< 
732d677
<     }
734,738d678
<     const id<MTLCommandBuffer> *command_buffers = command_buffer_builder;
< 
<     dispatch_apply(n_cb, ctx->d_queue, ^(size_t iter) {
<         const int cb_idx = iter;
< 
744d683
<         id<MTLCommandBuffer> command_buffer  = command_buffers[cb_idx];
747,755c686
<         const int node_start =                                      (cb_idx + 0) * n_nodes_per_cb;
<         const int node_end   = MIN((cb_idx == n_cb - 1) ? n_nodes : (cb_idx + 1) * n_nodes_per_cb, n_nodes);
< 
<         for (int i = node_start; i < node_end; ++i) {
<             if (i == -1) {
<                 [encoder memoryBarrierWithScope:MTLBarrierScopeBuffers];
<                 continue;
<             }
< 
---
>         for (int i = 0; i < gf->n_nodes; ++i) {
776a708
> #ifndef GGML_METAL_NDEBUG
780a713
> #endif
2300d2232
<     });
2305,2306d2236
<     for (int i = 0; i < n_cb; ++i) {
<         id<MTLCommandBuffer> command_buffer = command_buffers[i];
2311c2241
<             GGML_METAL_LOG_INFO("%s: command buffer %d failed with status %lu\n", __func__, i, status);
---
>             GGML_METAL_LOG_INFO("%s: command buffer failed with status %lu\n", __func__, status);
2314d2243
<     }
2468c2397
<                     options:MTLResourceStorageModeShared
---
>                     options:GGML_METAL_BUFFER_OPTIONS
2676,2677c2605
< void ggml_backend_metal_set_n_cb(ggml_backend_t backend, int n_cb) {
<     GGML_ASSERT(ggml_backend_is_metal(backend));
---
> void ggml_backend_metal_set_n_cb(ggml_backend_t backend, int n_cb) {}
2679,2683d2606
<     struct ggml_metal_context * ctx = (struct ggml_metal_context *)backend->context;
< 
<     ctx->n_cb = MIN(n_cb, GGML_METAL_MAX_BUFFERS);
< }
< 
